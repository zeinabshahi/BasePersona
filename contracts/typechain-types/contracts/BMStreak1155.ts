/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BMStreak1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BADGE_180D"
      | "BADGE_30D"
      | "BADGE_365D"
      | "BADGE_7D"
      | "BADGE_90D"
      | "balanceOf"
      | "balanceOfBatch"
      | "bm"
      | "bmFeeWei"
      | "claimBadge"
      | "claimedWindow"
      | "currentStreakWindow"
      | "dayNumberAt"
      | "getUser"
      | "globalTotal"
      | "isApprovedForAll"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setBmFeeWei"
      | "setTreasury"
      | "setURI"
      | "supportsInterface"
      | "totalsByDay"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "uri"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BM"
      | "BadgeClaimed"
      | "BmFeeUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "TransferBatch"
      | "TransferSingle"
      | "TreasuryUpdated"
      | "URI"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BADGE_180D",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BADGE_30D", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BADGE_365D",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BADGE_7D", values?: undefined): string;
  encodeFunctionData(functionFragment: "BADGE_90D", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "bm", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "bmFeeWei", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedWindow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStreakWindow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dayNumberAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBmFeeWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalsByDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "BADGE_180D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BADGE_30D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BADGE_365D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BADGE_7D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BADGE_90D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bmFeeWei", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStreakWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayNumberAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBmFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalsByDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BMEvent {
  export type InputTuple = [
    user: AddressLike,
    day: BigNumberish,
    streak: BigNumberish,
    reaction: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    day: bigint,
    streak: bigint,
    reaction: bigint
  ];
  export interface OutputObject {
    user: string;
    day: bigint;
    streak: bigint;
    reaction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    badgeId: BigNumberish,
    startDay: BigNumberish,
    endDay: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    badgeId: bigint,
    startDay: bigint,
    endDay: bigint
  ];
  export interface OutputObject {
    user: string;
    badgeId: bigint;
    startDay: bigint;
    endDay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BmFeeUpdatedEvent {
  export type InputTuple = [feeWei: BigNumberish];
  export type OutputTuple = [feeWei: bigint];
  export interface OutputObject {
    feeWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [treasury: AddressLike];
  export type OutputTuple = [treasury: string];
  export interface OutputObject {
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BMStreak1155 extends BaseContract {
  connect(runner?: ContractRunner | null): BMStreak1155;
  waitForDeployment(): Promise<this>;

  interface: BMStreak1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BADGE_180D: TypedContractMethod<[], [bigint], "view">;

  BADGE_30D: TypedContractMethod<[], [bigint], "view">;

  BADGE_365D: TypedContractMethod<[], [bigint], "view">;

  BADGE_7D: TypedContractMethod<[], [bigint], "view">;

  BADGE_90D: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  bm: TypedContractMethod<[reaction: BigNumberish], [void], "payable">;

  bmFeeWei: TypedContractMethod<[], [bigint], "view">;

  claimBadge: TypedContractMethod<
    [badgeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimedWindow: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { startDay: bigint; endDay: bigint }],
    "view"
  >;

  currentStreakWindow: TypedContractMethod<
    [a: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        startDay: bigint;
        endDay: bigint;
        startTs: bigint;
        endTs: bigint;
      }
    ],
    "view"
  >;

  dayNumberAt: TypedContractMethod<[ts: BigNumberish], [bigint], "view">;

  getUser: TypedContractMethod<
    [a: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  globalTotal: TypedContractMethod<[], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [void],
    "view"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [void],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean],
    [void],
    "view"
  >;

  setBmFeeWei: TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;

  setTreasury: TypedContractMethod<[t: AddressLike], [void], "nonpayable">;

  setURI: TypedContractMethod<[newURI: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalsByDay: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        lastDay: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
        total: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BADGE_180D"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE_30D"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE_365D"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE_7D"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE_90D"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "bm"
  ): TypedContractMethod<[reaction: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "bmFeeWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimBadge"
  ): TypedContractMethod<[badgeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimedWindow"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { startDay: bigint; endDay: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentStreakWindow"
  ): TypedContractMethod<
    [a: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        startDay: bigint;
        endDay: bigint;
        startTs: bigint;
        endTs: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dayNumberAt"
  ): TypedContractMethod<[ts: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [a: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalTotal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<[arg0: AddressLike, arg1: boolean], [void], "view">;
  getFunction(
    nameOrSignature: "setBmFeeWei"
  ): TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[t: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<[newURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalsByDay"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        lastDay: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
        total: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BM"
  ): TypedContractEvent<
    BMEvent.InputTuple,
    BMEvent.OutputTuple,
    BMEvent.OutputObject
  >;
  getEvent(
    key: "BadgeClaimed"
  ): TypedContractEvent<
    BadgeClaimedEvent.InputTuple,
    BadgeClaimedEvent.OutputTuple,
    BadgeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BmFeeUpdated"
  ): TypedContractEvent<
    BmFeeUpdatedEvent.InputTuple,
    BmFeeUpdatedEvent.OutputTuple,
    BmFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BM(address,uint32,uint32,uint8)": TypedContractEvent<
      BMEvent.InputTuple,
      BMEvent.OutputTuple,
      BMEvent.OutputObject
    >;
    BM: TypedContractEvent<
      BMEvent.InputTuple,
      BMEvent.OutputTuple,
      BMEvent.OutputObject
    >;

    "BadgeClaimed(address,uint256,uint32,uint32)": TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
    BadgeClaimed: TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;

    "BmFeeUpdated(uint256)": TypedContractEvent<
      BmFeeUpdatedEvent.InputTuple,
      BmFeeUpdatedEvent.OutputTuple,
      BmFeeUpdatedEvent.OutputObject
    >;
    BmFeeUpdated: TypedContractEvent<
      BmFeeUpdatedEvent.InputTuple,
      BmFeeUpdatedEvent.OutputTuple,
      BmFeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
